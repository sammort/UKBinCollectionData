{"uid":"1d82e7ead1b362c9","name":"Validate Council Output [TonbridgeAndMallingBC-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"b2d5541e3bec21fe5654b039ca862869","time":{"start":1705886297616,"stop":1705886300696,"duration":3080},"status":"failed","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"fixturefunc = <function scrape_step at 0x7fbe6dc2f370>\nrequest = <FixtureRequest for <Function test_scenario_outline[TonbridgeAndMallingBC-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fbe6cfdd2d0>, 'council': 'TonbridgeAndMallingBC', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/TonbridgeAndMallingBC.py:22: in parse_data\n    check_postcode(user_postcode)\nuk_bin_collection/uk_bin_collection/common.py:43: in check_postcode\n    val_error = json.loads(postcode_api_response.text)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fbe8138a6e0>\ns = '<!DOCTYPE html>\\n<!--[if lt IE 7]> <html class=\"no-js ie6 oldie\" lang=\"en-US\"> <![endif]-->\\n<!--[if IE 7]>    <html ...\\n  </div><!-- /#cf-wrapper -->\\n\\n  <script>\\n  window._cf_translation = {};\\n  \\n  \\n</script>\\n\\n</body>\\n</html>\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/decoder.py:355: JSONDecodeError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"fixturefunc = <function scrape_step at 0x7fbe6dc2f370>\nrequest = <FixtureRequest for <Function test_scenario_outline[TonbridgeAndMallingBC-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fbe6cfdd2d0>, 'council': 'TonbridgeAndMallingBC', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/TonbridgeAndMallingBC.py:22: in parse_data\n    check_postcode(user_postcode)\nuk_bin_collection/uk_bin_collection/common.py:43: in check_postcode\n    val_error = json.loads(postcode_api_response.text)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fbe8138a6e0>\ns = '<!DOCTYPE html>\\n<!--[if lt IE 7]> <html class=\"no-js ie6 oldie\" lang=\"en-US\"> <![endif]-->\\n<!--[if IE 7]>    <html ...\\n  </div><!-- /#cf-wrapper -->\\n\\n  <script>\\n  window._cf_translation = {};\\n  \\n  \\n</script>\\n\\n</body>\\n</html>\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/decoder.py:355: JSONDecodeError","steps":[{"name":"Given the council: TonbridgeAndMallingBC","time":{"start":1705886297617,"stop":1705886297617,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"When we scrape the data from TonbridgeAndMallingBC using None and the None is set","time":{"start":1705886297617,"stop":1705886300696,"duration":3079},"status":"failed","statusMessage":"Expecting value: line 1 column 1 (char 0)","statusTrace":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az801-588"},{"name":"thread","value":"2843-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"TonbridgeAndMallingBC"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":10,"unknown":0,"total":11},"items":[{"uid":"30c4346346f20f5e","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/11//#testresult/30c4346346f20f5e","status":"passed","time":{"start":1705800006090,"stop":1705800008236,"duration":2146}},{"uid":"3b2986135852c2d4","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/10//#testresult/3b2986135852c2d4","status":"passed","time":{"start":1705713371142,"stop":1705713373353,"duration":2211}},{"uid":"4ed795d3cb7e7bf8","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/9//#testresult/4ed795d3cb7e7bf8","status":"passed","time":{"start":1705626927979,"stop":1705626930130,"duration":2151}},{"uid":"87ff0982e2b23faa","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/8//#testresult/87ff0982e2b23faa","status":"passed","time":{"start":1705540593865,"stop":1705540596078,"duration":2213}},{"uid":"b3ab9e3c1cf4cbea","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/7//#testresult/b3ab9e3c1cf4cbea","status":"passed","time":{"start":1705454245565,"stop":1705454248233,"duration":2668}},{"uid":"50f3dc3943c546f","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/6//#testresult/50f3dc3943c546f","status":"passed","time":{"start":1705367679316,"stop":1705367681692,"duration":2376}},{"uid":"ed61f7eade16eb12","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/5//#testresult/ed61f7eade16eb12","status":"passed","time":{"start":1705281418996,"stop":1705281421132,"duration":2136}},{"uid":"a1fe05983413e273","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/4//#testresult/a1fe05983413e273","status":"passed","time":{"start":1705195334538,"stop":1705195337254,"duration":2716}},{"uid":"5072debd0032eea4","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/3//#testresult/5072debd0032eea4","status":"passed","time":{"start":1705108479839,"stop":1705108482180,"duration":2341}},{"uid":"e35308849e57883d","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/2//#testresult/e35308849e57883d","status":"passed","time":{"start":1705022130644,"stop":1705022132834,"duration":2190}}]},"tags":[]},"source":"1d82e7ead1b362c9.json","parameterValues":["TonbridgeAndMallingBC","None","None"]}