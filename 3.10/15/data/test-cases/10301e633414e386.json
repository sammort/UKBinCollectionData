{"uid":"10301e633414e386","name":"Validate Council Output [CroydonCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"45037cd07f0522bb0563bf59883b0382","time":{"start":1706145330620,"stop":1706145332957,"duration":2337},"status":"failed","statusMessage":"ValueError: Code 5: No bin data found. Please ensure the council website is showing data first, then open an issue on GitHub.","statusTrace":"fixturefunc = <function scrape_step at 0x7f749df5b2e0>\nrequest = <FixtureRequest for <Function test_scenario_outline[CroydonCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f749da60100>, 'council': 'CroydonCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <CroydonCouncil.CouncilClass object at 0x7f749de08550>, page = ''\nkwargs = {'headless': True, 'paon': '13', 'postcode': 'SE25 5DW', 'uprn': None, ...}\ns = <requests.sessions.Session object at 0x7f749dd65ab0>\nbase_url = 'https://service.croydon.gov.uk', paon = '13', postcode = 'SE25 5DW'\ncsrf_token = '797b6b0c9fe4fecf7ea01e62758661d7ad9abf67', address_id = '96383'\ncollection_data = '<input type=\"hidden\" id=\"page_title\" value=\"Check your bin collections - Croydon Council\"><script type=\"text/javascri...v>\\n</div></div></div></div></div>\\n\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        s = requests.session()\n        base_url = \"https://service.croydon.gov.uk\"\n        paon = kwargs.get(\"paon\")\n        postcode = kwargs.get(\"postcode\")\n        check_paon(paon)\n        check_postcode(postcode)\n    \n        # Firstly, get a CSRF (cross-site request forgery) token\n        csrf_token = get_csrf_token(s, base_url)\n        # Next, get the address_id\n        address_id = get_address_id(s, base_url, csrf_token, postcode, paon)\n        # Finally, use the address_id to get the collection data\n        collection_data = get_collection_data(s, base_url, csrf_token, address_id)\n        if collection_data != \"\":\n            soup = BeautifulSoup(collection_data, features=\"html.parser\")\n            soup.prettify()\n    \n            # Find the list elements\n            collection_record_elements = soup.find_all(\n                \"div\", {\"class\": \"listing_template_record\"}\n            )\n    \n            # Form a JSON wrapper\n            data = {\"bins\": []}\n    \n            for e in collection_record_elements:\n                collection_type = e.find_all(\n                    \"div\", {\"class\": \"fragment_presenter_template_show\"}\n                )[0].text.strip()\n                collection_date = (\n                    e.find(\"div\", {\"class\": \"bin-collection-next\"})\n                    .attrs[\"data-current_value\"]\n                    .strip()\n                )\n                dict_data = {\n                    \"type\": collection_type,\n                    \"collectionDate\": datetime.strptime(\n                        collection_date, \"%d/%m/%Y %H:%M\"\n                    ).strftime(date_format),\n                }\n                data[\"bins\"].append(dict_data)\n    \n            if len(data[\"bins\"]) == 0:\n>               raise ValueError(\n                    \"Code 5: No bin data found. Please ensure the council website is showing data first,\"\n                    \" then open an issue on GitHub.\"\n                )\nE               ValueError: Code 5: No bin data found. Please ensure the council website is showing data first, then open an issue on GitHub.\n\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:286: ValueError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: Code 5: No bin data found. Please ensure the council website is showing data first, then open an issue on GitHub.","statusTrace":"fixturefunc = <function scrape_step at 0x7f749df5b2e0>\nrequest = <FixtureRequest for <Function test_scenario_outline[CroydonCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f749da60100>, 'council': 'CroydonCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <CroydonCouncil.CouncilClass object at 0x7f749de08550>, page = ''\nkwargs = {'headless': True, 'paon': '13', 'postcode': 'SE25 5DW', 'uprn': None, ...}\ns = <requests.sessions.Session object at 0x7f749dd65ab0>\nbase_url = 'https://service.croydon.gov.uk', paon = '13', postcode = 'SE25 5DW'\ncsrf_token = '797b6b0c9fe4fecf7ea01e62758661d7ad9abf67', address_id = '96383'\ncollection_data = '<input type=\"hidden\" id=\"page_title\" value=\"Check your bin collections - Croydon Council\"><script type=\"text/javascri...v>\\n</div></div></div></div></div>\\n\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        s = requests.session()\n        base_url = \"https://service.croydon.gov.uk\"\n        paon = kwargs.get(\"paon\")\n        postcode = kwargs.get(\"postcode\")\n        check_paon(paon)\n        check_postcode(postcode)\n    \n        # Firstly, get a CSRF (cross-site request forgery) token\n        csrf_token = get_csrf_token(s, base_url)\n        # Next, get the address_id\n        address_id = get_address_id(s, base_url, csrf_token, postcode, paon)\n        # Finally, use the address_id to get the collection data\n        collection_data = get_collection_data(s, base_url, csrf_token, address_id)\n        if collection_data != \"\":\n            soup = BeautifulSoup(collection_data, features=\"html.parser\")\n            soup.prettify()\n    \n            # Find the list elements\n            collection_record_elements = soup.find_all(\n                \"div\", {\"class\": \"listing_template_record\"}\n            )\n    \n            # Form a JSON wrapper\n            data = {\"bins\": []}\n    \n            for e in collection_record_elements:\n                collection_type = e.find_all(\n                    \"div\", {\"class\": \"fragment_presenter_template_show\"}\n                )[0].text.strip()\n                collection_date = (\n                    e.find(\"div\", {\"class\": \"bin-collection-next\"})\n                    .attrs[\"data-current_value\"]\n                    .strip()\n                )\n                dict_data = {\n                    \"type\": collection_type,\n                    \"collectionDate\": datetime.strptime(\n                        collection_date, \"%d/%m/%Y %H:%M\"\n                    ).strftime(date_format),\n                }\n                data[\"bins\"].append(dict_data)\n    \n            if len(data[\"bins\"]) == 0:\n>               raise ValueError(\n                    \"Code 5: No bin data found. Please ensure the council website is showing data first,\"\n                    \" then open an issue on GitHub.\"\n                )\nE               ValueError: Code 5: No bin data found. Please ensure the council website is showing data first, then open an issue on GitHub.\n\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:286: ValueError","steps":[{"name":"Given the council: CroydonCouncil","time":{"start":1706145330620,"stop":1706145330621,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from CroydonCouncil using None and the None is set","time":{"start":1706145330621,"stop":1706145332957,"duration":2336},"status":"failed","statusMessage":"Code 5: No bin data found. Please ensure the council website is showing data first, then open an issue on GitHub.","statusTrace":"ValueError: Code 5: No bin data found. Please ensure the council website is showing data first, then open an issue on GitHub.\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1205-176"},{"name":"thread","value":"2725-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"CroydonCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":8,"broken":0,"skipped":0,"passed":6,"unknown":0,"total":14},"items":[{"uid":"771a0ed21aa19887","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/14//#testresult/771a0ed21aa19887","status":"passed","time":{"start":1706058913998,"stop":1706058919028,"duration":5030}},{"uid":"20e8097578d59cc7","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/13//#testresult/20e8097578d59cc7","status":"passed","time":{"start":1705972556657,"stop":1705972561974,"duration":5317}},{"uid":"837887519d3b4649","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/12//#testresult/837887519d3b4649","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1705886242176,"stop":1705886243883,"duration":1707}},{"uid":"9e38ef90b8964709","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/11//#testresult/9e38ef90b8964709","status":"passed","time":{"start":1705799967700,"stop":1705799972443,"duration":4743}},{"uid":"ada2a93c698f4ef5","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/10//#testresult/ada2a93c698f4ef5","status":"passed","time":{"start":1705713183726,"stop":1705713187906,"duration":4180}},{"uid":"a4c5c5d7f7075871","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/9//#testresult/a4c5c5d7f7075871","status":"passed","time":{"start":1705626874293,"stop":1705626879137,"duration":4844}},{"uid":"ec5faf955be71f0f","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/8//#testresult/ec5faf955be71f0f","status":"failed","statusDetails":"AttributeError: 'NoneType' object has no attribute 'attrs'","time":{"start":1705540414721,"stop":1705540419318,"duration":4597}},{"uid":"7622f07d89eeea0b","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/7//#testresult/7622f07d89eeea0b","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1705454065136,"stop":1705454067072,"duration":1936}},{"uid":"ca786b3b360971c0","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/6//#testresult/ca786b3b360971c0","status":"passed","time":{"start":1705367626848,"stop":1705367631483,"duration":4635}},{"uid":"79491b1889cd0d04","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/5//#testresult/79491b1889cd0d04","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1705281369320,"stop":1705281370815,"duration":1495}},{"uid":"9087fb2c09a7af48","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/4//#testresult/9087fb2c09a7af48","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1705195160301,"stop":1705195162318,"duration":2017}},{"uid":"57a501fde38073ae","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/3//#testresult/57a501fde38073ae","status":"failed","statusDetails":"ValueError: Code 5: Failed to get bin data. Too many requests. Please wait a few minutes before trying again.","time":{"start":1705108395007,"stop":1705108396675,"duration":1668}},{"uid":"6d34fde7231e528","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/2//#testresult/6d34fde7231e528","status":"failed","statusDetails":"AttributeError: 'NoneType' object has no attribute 'attrs'","time":{"start":1705022070168,"stop":1705022074790,"duration":4622}}]},"tags":[]},"source":"10301e633414e386.json","parameterValues":["CroydonCouncil","None","None"]}