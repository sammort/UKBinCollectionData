{"uid":"c8dc052632df67fb","name":"Validate Council Output [ValeofGlamorganCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"9cf2d3433b0a6f80c8b05ae26d0f9f5e","time":{"start":1705972618813,"stop":1705972620100,"duration":1287},"status":"failed","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"fixturefunc = <function scrape_step at 0x7fefc5c33400>\nrequest = <FixtureRequest for <Function test_scenario_outline[ValeofGlamorganCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fefc4f58910>, 'council': 'ValeofGlamorganCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/ValeofGlamorganCouncil.py:52: in parse_data\n    json.loads(response)[\"Results\"][\"Refuse_HIDE2\"][\"Your_Refuse_round_is\"]\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fefd938a6e0>, s = '', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/decoder.py:355: JSONDecodeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"fixturefunc = <function scrape_step at 0x7fefc5c33400>\nrequest = <FixtureRequest for <Function test_scenario_outline[ValeofGlamorganCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fefc4f58910>, 'council': 'ValeofGlamorganCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/ValeofGlamorganCouncil.py:52: in parse_data\n    json.loads(response)[\"Results\"][\"Refuse_HIDE2\"][\"Your_Refuse_round_is\"]\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fefd938a6e0>, s = '', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/decoder.py:355: JSONDecodeError","steps":[{"name":"Given the council: ValeofGlamorganCouncil","time":{"start":1705972618813,"stop":1705972618814,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from ValeofGlamorganCouncil using None and the None is set","time":{"start":1705972618814,"stop":1705972620100,"duration":1286},"status":"failed","statusMessage":"Expecting value: line 1 column 1 (char 0)","statusTrace":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1055-108"},{"name":"thread","value":"3131-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"ValeofGlamorganCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":12,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":12},"items":[{"uid":"98bb25a2438767ca","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/12//#testresult/98bb25a2438767ca","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1705886298241,"stop":1705886299247,"duration":1006}},{"uid":"fb0ee67a70124f5","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/11//#testresult/fb0ee67a70124f5","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1705800010104,"stop":1705800010818,"duration":714}},{"uid":"7db718c7efeed8ae","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/10//#testresult/7db718c7efeed8ae","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1705713247934,"stop":1705713249170,"duration":1236}},{"uid":"bb013075ef35a34d","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/9//#testresult/bb013075ef35a34d","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1705626931092,"stop":1705626932390,"duration":1298}},{"uid":"fc121b0e319e123c","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/8//#testresult/fc121b0e319e123c","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1705540477647,"stop":1705540479447,"duration":1800}},{"uid":"da509cc944829cd2","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/7//#testresult/da509cc944829cd2","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1705454121802,"stop":1705454123258,"duration":1456}},{"uid":"70c24c6868afb458","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/6//#testresult/70c24c6868afb458","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1705367681007,"stop":1705367682332,"duration":1325}},{"uid":"d601947de74575b","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/5//#testresult/d601947de74575b","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1705281422923,"stop":1705281423742,"duration":819}},{"uid":"b4d45ef2d9959a5","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/4//#testresult/b4d45ef2d9959a5","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1705195206408,"stop":1705195207576,"duration":1168}},{"uid":"8d9c7523d04cfb07","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/3//#testresult/8d9c7523d04cfb07","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1705108485222,"stop":1705108486527,"duration":1305}},{"uid":"e89b3912d7bb1e42","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/2//#testresult/e89b3912d7bb1e42","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1705022127600,"stop":1705022128848,"duration":1248}}]},"tags":[]},"source":"c8dc052632df67fb.json","parameterValues":["ValeofGlamorganCouncil","None","None"]}