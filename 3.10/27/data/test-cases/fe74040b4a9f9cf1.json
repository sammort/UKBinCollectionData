{"uid":"fe74040b4a9f9cf1","name":"Validate Council Output [LiverpoolCityCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"fa4aaa0dd252fd9a79edc6c4503ba92d","time":{"start":1707181732591,"stop":1707181734063,"duration":1472},"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7ff1e2ec3370>\nrequest = <FixtureRequest for <Function test_scenario_outline[LiverpoolCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7ff1e221ccd0>, 'council': 'LiverpoolCityCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/LiverpoolCityCouncil.py:38: in parse_data\n    bin_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%A, %d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%A, %d %B'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7ff1e2ec3370>\nrequest = <FixtureRequest for <Function test_scenario_outline[LiverpoolCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7ff1e221ccd0>, 'council': 'LiverpoolCityCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/LiverpoolCityCouncil.py:38: in parse_data\n    bin_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Tomorrow', format = '%A, %d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Tomorrow' does not match format '%A, %d %B'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","steps":[{"name":"Given the council: LiverpoolCityCouncil","time":{"start":1707181732592,"stop":1707181732592,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from LiverpoolCityCouncil using None and the None is set","time":{"start":1707181732592,"stop":1707181734063,"duration":1471},"status":"failed","statusMessage":"time data 'Tomorrow' does not match format '%A, %d %B'","statusTrace":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1535-568"},{"name":"thread","value":"2752-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"LiverpoolCityCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":5,"broken":0,"skipped":0,"passed":21,"unknown":0,"total":26},"items":[{"uid":"cb9069a89d9c49b4","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/26//#testresult/cb9069a89d9c49b4","status":"passed","time":{"start":1707095434879,"stop":1707095436027,"duration":1148}},{"uid":"9f531d4684f28b4f","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/25//#testresult/9f531d4684f28b4f","status":"passed","time":{"start":1707009213639,"stop":1707009214646,"duration":1007}},{"uid":"c2b50a87f18dbc53","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/24//#testresult/c2b50a87f18dbc53","status":"passed","time":{"start":1706922433391,"stop":1706922434557,"duration":1166}},{"uid":"2e4eca76261076e0","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/23//#testresult/2e4eca76261076e0","status":"passed","time":{"start":1706836129267,"stop":1706836130458,"duration":1191}},{"uid":"b960783496aceba8","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/22//#testresult/b960783496aceba8","status":"passed","time":{"start":1706749965305,"stop":1706749966787,"duration":1482}},{"uid":"121aec8d44fbe4bc","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/21//#testresult/121aec8d44fbe4bc","status":"passed","time":{"start":1706663327331,"stop":1706663329043,"duration":1712}},{"uid":"4a25983cd5f960b4","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/20//#testresult/4a25983cd5f960b4","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'","time":{"start":1706576913502,"stop":1706576914867,"duration":1365}},{"uid":"53d2f4a393a56fed","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/19//#testresult/53d2f4a393a56fed","status":"passed","time":{"start":1706490550170,"stop":1706490551300,"duration":1130}},{"uid":"f87c82df5109e76a","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/18//#testresult/f87c82df5109e76a","status":"passed","time":{"start":1706404421770,"stop":1706404423219,"duration":1449}},{"uid":"d30ea62da28441e","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/17//#testresult/d30ea62da28441e","status":"passed","time":{"start":1706317658409,"stop":1706317659217,"duration":808}},{"uid":"f7c412217a76aaf8","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/16//#testresult/f7c412217a76aaf8","status":"passed","time":{"start":1706231430639,"stop":1706231432019,"duration":1380}},{"uid":"3a9e03b56071b081","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/15//#testresult/3a9e03b56071b081","status":"passed","time":{"start":1706145340217,"stop":1706145341371,"duration":1154}},{"uid":"28c564cc8b8d72c5","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/14//#testresult/28c564cc8b8d72c5","status":"passed","time":{"start":1706058929012,"stop":1706058929820,"duration":808}},{"uid":"5edab6b3e0c0db30","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/13//#testresult/5edab6b3e0c0db30","status":"failed","statusDetails":"ValueError: time data 'Tomorrow' does not match format '%A, %d %B'","time":{"start":1705972576079,"stop":1705972577248,"duration":1169}},{"uid":"e1cdc418b419016e","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/12//#testresult/e1cdc418b419016e","status":"failed","statusDetails":"requests.exceptions.ConnectTimeout: HTTPSConnectionPool(host='liverpool.gov.uk', port=443): Max retries exceeded with url: /Bins/BinDatesTable?UPRN=38164600&User-Agent=Mozilla%2F5.0+%28Windows+NT+10.0%3B+Win64%3B+x64%29+AppleWebKit%2F537.36+%28KHTML%2C+like+Gecko%29+Chrome%2F108.0.0.0+Safari%2F537.36 (Caused by ConnectTimeoutError(<urllib3.connection.HTTPSConnection object at 0x7fb89ba2c100>, 'Connection to liverpool.gov.uk timed out. (connect timeout=None)'))","time":{"start":1705886260343,"stop":1705886391646,"duration":131303}},{"uid":"ed9953a42c818037","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/11//#testresult/ed9953a42c818037","status":"passed","time":{"start":1705799990966,"stop":1705799992038,"duration":1072}},{"uid":"284ccb6ac811cb8a","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/10//#testresult/284ccb6ac811cb8a","status":"passed","time":{"start":1705713204804,"stop":1705713205874,"duration":1070}},{"uid":"167ace3118c70220","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/9//#testresult/167ace3118c70220","status":"passed","time":{"start":1705626898190,"stop":1705626899386,"duration":1196}},{"uid":"71972a2f88a27d25","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/8//#testresult/71972a2f88a27d25","status":"passed","time":{"start":1705540433934,"stop":1705540434539,"duration":605}},{"uid":"11549eb1e7ce6af1","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/7//#testresult/11549eb1e7ce6af1","status":"passed","time":{"start":1705454092167,"stop":1705454093588,"duration":1421}}]},"tags":[]},"source":"fe74040b4a9f9cf1.json","parameterValues":["LiverpoolCityCouncil","None","None"]}