{"uid":"91a132591c3baafc","name":"Validate Council Output [NottinghamCityCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"10866f1748aa8c1e3efd6f525dda6e8f","time":{"start":1707527208096,"stop":1707527276370,"duration":68274},"status":"failed","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"fixturefunc = <function scrape_step at 0x7f0ef541b400>\nrequest = <FixtureRequest for <Function test_scenario_outline[NottinghamCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f0ef447a590>, 'council': 'NottinghamCityCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/NottinghamCityCouncil.py:21: in parse_data\n    json_data = json.loads(response.text)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f0f08b8a6e0>\ns = '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\\r\\n<htm...source you are looking for, and it cannot be displayed.</h3>\\r\\n </fieldset></div>\\r\\n</div>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/decoder.py:355: JSONDecodeError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"fixturefunc = <function scrape_step at 0x7f0ef541b400>\nrequest = <FixtureRequest for <Function test_scenario_outline[NottinghamCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f0ef447a590>, 'council': 'NottinghamCityCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/NottinghamCityCouncil.py:21: in parse_data\n    json_data = json.loads(response.text)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f0f08b8a6e0>\ns = '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\\r\\n<htm...source you are looking for, and it cannot be displayed.</h3>\\r\\n </fieldset></div>\\r\\n</div>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/json/decoder.py:355: JSONDecodeError","steps":[{"name":"Given the council: NottinghamCityCouncil","time":{"start":1707527208097,"stop":1707527208097,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from NottinghamCityCouncil using None and the None is set","time":{"start":1707527208097,"stop":1707527276370,"duration":68273},"status":"failed","statusMessage":"Expecting value: line 1 column 1 (char 0)","statusTrace":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1020-365"},{"name":"thread","value":"2770-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"NottinghamCityCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":29,"unknown":0,"total":30},"items":[{"uid":"ef1847e5b51ca1de","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/30//#testresult/ef1847e5b51ca1de","status":"passed","time":{"start":1707440887688,"stop":1707440889950,"duration":2262}},{"uid":"7671a01277fd00c9","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/29//#testresult/7671a01277fd00c9","status":"passed","time":{"start":1707354487505,"stop":1707354490957,"duration":3452}},{"uid":"6c7bc891fd2a805b","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/28//#testresult/6c7bc891fd2a805b","status":"passed","time":{"start":1707268013181,"stop":1707268016679,"duration":3498}},{"uid":"1db8343619b35e97","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/27//#testresult/1db8343619b35e97","status":"passed","time":{"start":1707181734135,"stop":1707181737317,"duration":3182}},{"uid":"d1666c0db0f99164","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/26//#testresult/d1666c0db0f99164","status":"passed","time":{"start":1707095447795,"stop":1707095452163,"duration":4368}},{"uid":"79ffb1ce9ac40e29","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/25//#testresult/79ffb1ce9ac40e29","status":"passed","time":{"start":1707009231985,"stop":1707009234289,"duration":2304}},{"uid":"10749dc072dcd0dc","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/24//#testresult/10749dc072dcd0dc","status":"passed","time":{"start":1706922453101,"stop":1706922464223,"duration":11122}},{"uid":"a640cef873b24e1","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/23//#testresult/a640cef873b24e1","status":"passed","time":{"start":1706836131542,"stop":1706836134486,"duration":2944}},{"uid":"e01e6da095c2868c","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/22//#testresult/e01e6da095c2868c","status":"passed","time":{"start":1706749973426,"stop":1706749975798,"duration":2372}},{"uid":"9259d1e48cded68e","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/21//#testresult/9259d1e48cded68e","status":"passed","time":{"start":1706663357038,"stop":1706663363163,"duration":6125}},{"uid":"64645cbd1ec2bdd9","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/20//#testresult/64645cbd1ec2bdd9","status":"passed","time":{"start":1706576939180,"stop":1706576942881,"duration":3701}},{"uid":"c8f0adf95f6917a8","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/19//#testresult/c8f0adf95f6917a8","status":"passed","time":{"start":1706490558455,"stop":1706490562952,"duration":4497}},{"uid":"5b88adc7f5f04da4","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/18//#testresult/5b88adc7f5f04da4","status":"passed","time":{"start":1706404459230,"stop":1706404463375,"duration":4145}},{"uid":"322a8e29f92fabea","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/17//#testresult/322a8e29f92fabea","status":"passed","time":{"start":1706317673677,"stop":1706317682935,"duration":9258}},{"uid":"5dce44912275303","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/16//#testresult/5dce44912275303","status":"passed","time":{"start":1706231438130,"stop":1706231443635,"duration":5505}},{"uid":"212f927245ebd9c3","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/15//#testresult/212f927245ebd9c3","status":"passed","time":{"start":1706145353893,"stop":1706145359952,"duration":6059}},{"uid":"76f06aae5893339b","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/14//#testresult/76f06aae5893339b","status":"passed","time":{"start":1706058939617,"stop":1706058941714,"duration":2097}},{"uid":"e457b339b095a09f","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/13//#testresult/e457b339b095a09f","status":"passed","time":{"start":1705972588297,"stop":1705972591555,"duration":3258}},{"uid":"245b13c4cc46611a","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/12//#testresult/245b13c4cc46611a","status":"passed","time":{"start":1705886270758,"stop":1705886273384,"duration":2626}},{"uid":"9619d3d49fa18bff","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/11//#testresult/9619d3d49fa18bff","status":"passed","time":{"start":1705799992041,"stop":1705799994648,"duration":2607}}]},"tags":[]},"source":"91a132591c3baafc.json","parameterValues":["NottinghamCityCouncil","None","None"]}