{"uid":"ae7f6ae1ad602c67","name":"Validate Council Output [MaldonDistrictCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"d7ae259690887cdb3dd06225c666392f","time":{"start":1707527211115,"stop":1707527244224,"duration":33109},"status":"failed","statusMessage":"ValueError: No bin data found for provided UPRN.","statusTrace":"fixturefunc = <function scrape_step at 0x7f5588b2f010>\nrequest = <FixtureRequest for <Function test_scenario_outline[MaldonDistrictCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f5588667f10>, 'council': 'MaldonDistrictCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <MaldonDistrictCouncil.CouncilClass object at 0x7f558867c9a0>, page = ''\nkwargs = {'headless': True, 'paon': None, 'postcode': None, 'uprn': '100090557253', ...}\ndata = {'bins': []}, uprn = '100090557253', response = <Response [500]>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        data = {\"bins\": []}\n        uprn = kwargs.get(\"uprn\")\n        check_uprn(uprn)\n    \n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(\n            f\"https://maldon.suez.co.uk/maldon/ServiceSummary?uprn={uprn}\",\n            headers={\"User-Agent\": \"Mozilla/5.0 (Windows NT 6.1; Win64; x64)\"},\n        )\n        if response.status_code != 200:\n>           raise ValueError(\"No bin data found for provided UPRN.\")\nE           ValueError: No bin data found for provided UPRN.\n\nuk_bin_collection/uk_bin_collection/councils/MaldonDistrictCouncil.py:25: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: No bin data found for provided UPRN.","statusTrace":"fixturefunc = <function scrape_step at 0x7f5588b2f010>\nrequest = <FixtureRequest for <Function test_scenario_outline[MaldonDistrictCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f5588667f10>, 'council': 'MaldonDistrictCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <MaldonDistrictCouncil.CouncilClass object at 0x7f558867c9a0>, page = ''\nkwargs = {'headless': True, 'paon': None, 'postcode': None, 'uprn': '100090557253', ...}\ndata = {'bins': []}, uprn = '100090557253', response = <Response [500]>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        data = {\"bins\": []}\n        uprn = kwargs.get(\"uprn\")\n        check_uprn(uprn)\n    \n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(\n            f\"https://maldon.suez.co.uk/maldon/ServiceSummary?uprn={uprn}\",\n            headers={\"User-Agent\": \"Mozilla/5.0 (Windows NT 6.1; Win64; x64)\"},\n        )\n        if response.status_code != 200:\n>           raise ValueError(\"No bin data found for provided UPRN.\")\nE           ValueError: No bin data found for provided UPRN.\n\nuk_bin_collection/uk_bin_collection/councils/MaldonDistrictCouncil.py:25: ValueError","steps":[{"name":"Given the council: MaldonDistrictCouncil","time":{"start":1707527211115,"stop":1707527211115,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from MaldonDistrictCouncil using None and the None is set","time":{"start":1707527211115,"stop":1707527244224,"duration":33109},"status":"failed","statusMessage":"No bin data found for provided UPRN.","statusTrace":"ValueError: No bin data found for provided UPRN.\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1020-365"},{"name":"thread","value":"2767-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"MaldonDistrictCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":28,"unknown":0,"total":30},"items":[{"uid":"fdfc3ad43fa3f9db","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/30//#testresult/fdfc3ad43fa3f9db","status":"passed","time":{"start":1707440857981,"stop":1707440859432,"duration":1451}},{"uid":"bff5b250f463ece8","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/29//#testresult/bff5b250f463ece8","status":"passed","time":{"start":1707354463795,"stop":1707354465000,"duration":1205}},{"uid":"753efacf9846a39c","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/28//#testresult/753efacf9846a39c","status":"passed","time":{"start":1707268000960,"stop":1707268002091,"duration":1131}},{"uid":"2e7f52bec8ff6d3e","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/27//#testresult/2e7f52bec8ff6d3e","status":"passed","time":{"start":1707181719371,"stop":1707181720837,"duration":1466}},{"uid":"c6dd0a0f5ceb2fb5","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/26//#testresult/c6dd0a0f5ceb2fb5","status":"passed","time":{"start":1707095442183,"stop":1707095443227,"duration":1044}},{"uid":"fc6992b3f267c67d","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/25//#testresult/fc6992b3f267c67d","status":"passed","time":{"start":1707009204673,"stop":1707009206140,"duration":1467}},{"uid":"400c7026bb14819b","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/24//#testresult/400c7026bb14819b","status":"failed","statusDetails":"ValueError: No bin data found for provided UPRN.","time":{"start":1706922472364,"stop":1706922505940,"duration":33576}},{"uid":"531ef90d0449ec51","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/23//#testresult/531ef90d0449ec51","status":"passed","time":{"start":1706836123975,"stop":1706836125219,"duration":1244}},{"uid":"c000ebe80bd4db94","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/22//#testresult/c000ebe80bd4db94","status":"passed","time":{"start":1706749958261,"stop":1706749959569,"duration":1308}},{"uid":"6024fc2509c5f73","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/21//#testresult/6024fc2509c5f73","status":"passed","time":{"start":1706663335110,"stop":1706663336192,"duration":1082}},{"uid":"7a1f6969cfc10f4a","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/20//#testresult/7a1f6969cfc10f4a","status":"passed","time":{"start":1706576922733,"stop":1706576923881,"duration":1148}},{"uid":"9ae4e472fc9b9f07","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/19//#testresult/9ae4e472fc9b9f07","status":"passed","time":{"start":1706490550260,"stop":1706490551538,"duration":1278}},{"uid":"9970badf2a50fb8e","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/18//#testresult/9970badf2a50fb8e","status":"passed","time":{"start":1706404420280,"stop":1706404421567,"duration":1287}},{"uid":"c52e588e0c3ef13a","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/17//#testresult/c52e588e0c3ef13a","status":"passed","time":{"start":1706317669341,"stop":1706317670495,"duration":1154}},{"uid":"5ffaf35aa982e81f","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/16//#testresult/5ffaf35aa982e81f","status":"passed","time":{"start":1706231421170,"stop":1706231422252,"duration":1082}},{"uid":"7ba7e37cd05615d3","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/15//#testresult/7ba7e37cd05615d3","status":"passed","time":{"start":1706145347530,"stop":1706145348980,"duration":1450}},{"uid":"bdf42b664d399c78","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/14//#testresult/bdf42b664d399c78","status":"passed","time":{"start":1706058927713,"stop":1706058929096,"duration":1383}},{"uid":"caaade59bea62920","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/13//#testresult/caaade59bea62920","status":"passed","time":{"start":1705972572557,"stop":1705972573903,"duration":1346}},{"uid":"87212e3266906158","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/12//#testresult/87212e3266906158","status":"passed","time":{"start":1705886256615,"stop":1705886258016,"duration":1401}},{"uid":"669f38d3afa479cf","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/11//#testresult/669f38d3afa479cf","status":"passed","time":{"start":1705799983791,"stop":1705799984806,"duration":1015}}]},"tags":[]},"source":"ae7f6ae1ad602c67.json","parameterValues":["MaldonDistrictCouncil","None","None"]}