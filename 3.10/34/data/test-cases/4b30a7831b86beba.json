{"uid":"4b30a7831b86beba","name":"Validate Council Output [BarnsleyMBCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"715a5e21965006368115a859a416bfe7","time":{"start":1707786512910,"stop":1707786514249,"duration":1339},"status":"failed","statusMessage":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f73ef7c2e60>\nrequest = <FixtureRequest for <Function test_scenario_outline[BarnsleyMBCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f74023bd870>, 'council': 'BarnsleyMBCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BarnsleyMBCouncil.py:66: in parse_data\n    bin_date = datetime.strptime(heading[0].text, \"%A, %B %d, %Y\")\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Today', format = '%A, %B %d, %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f73ef7c2e60>\nrequest = <FixtureRequest for <Function test_scenario_outline[BarnsleyMBCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f74023bd870>, 'council': 'BarnsleyMBCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BarnsleyMBCouncil.py:66: in parse_data\n    bin_date = datetime.strptime(heading[0].text, \"%A, %B %d, %Y\")\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Today', format = '%A, %B %d, %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/_strptime.py:349: ValueError","steps":[{"name":"Given the council: BarnsleyMBCouncil","time":{"start":1707786512910,"stop":1707786512910,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from BarnsleyMBCouncil using None and the None is set","time":{"start":1707786512911,"stop":1707786514249,"duration":1338},"status":"failed","statusMessage":"time data 'Today' does not match format '%A, %B %d, %Y'","statusTrace":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1498-286"},{"name":"thread","value":"2721-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"BarnsleyMBCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":5,"broken":0,"skipped":0,"passed":28,"unknown":0,"total":33},"items":[{"uid":"c10034797bb3c046","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/33//#testresult/c10034797bb3c046","status":"passed","time":{"start":1707700107291,"stop":1707700108402,"duration":1111}},{"uid":"3900a9e1767b80be","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/32//#testresult/3900a9e1767b80be","status":"passed","time":{"start":1707613989099,"stop":1707613990148,"duration":1049}},{"uid":"f48afe43f03fec8f","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/31//#testresult/f48afe43f03fec8f","status":"passed","time":{"start":1707527169570,"stop":1707527170896,"duration":1326}},{"uid":"35ed20f3c79c0299","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/30//#testresult/35ed20f3c79c0299","status":"passed","time":{"start":1707440839280,"stop":1707440841565,"duration":2285}},{"uid":"85215f9c161a560a","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/29//#testresult/85215f9c161a560a","status":"passed","time":{"start":1707354438958,"stop":1707354440363,"duration":1405}},{"uid":"915e6f7991a81c6","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/28//#testresult/915e6f7991a81c6","status":"passed","time":{"start":1707267981544,"stop":1707267982461,"duration":917}},{"uid":"df9d1d913a2e275f","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/27//#testresult/df9d1d913a2e275f","status":"failed","statusDetails":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","time":{"start":1707181702919,"stop":1707181704942,"duration":2023}},{"uid":"60c0f36b05228cdc","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/26//#testresult/60c0f36b05228cdc","status":"passed","time":{"start":1707095422574,"stop":1707095423604,"duration":1030}},{"uid":"5fca07eb231df700","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/25//#testresult/5fca07eb231df700","status":"passed","time":{"start":1707009182656,"stop":1707009183962,"duration":1306}},{"uid":"a7daacccf30913ea","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/24//#testresult/a7daacccf30913ea","status":"passed","time":{"start":1706922422412,"stop":1706922423523,"duration":1111}},{"uid":"93e8d1fa467c350f","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/23//#testresult/93e8d1fa467c350f","status":"passed","time":{"start":1706836104433,"stop":1706836106794,"duration":2361}},{"uid":"a13b4320ee887e92","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/22//#testresult/a13b4320ee887e92","status":"passed","time":{"start":1706749940397,"stop":1706749941589,"duration":1192}},{"uid":"a46ab67a3b162595","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/21//#testresult/a46ab67a3b162595","status":"passed","time":{"start":1706663314540,"stop":1706663315497,"duration":957}},{"uid":"91eb18d04ee8cad6","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/20//#testresult/91eb18d04ee8cad6","status":"failed","statusDetails":"ValueError: time data 'Today' does not match format '%A, %B %d, %Y'","time":{"start":1706576986962,"stop":1706576987819,"duration":857}},{"uid":"9488d9a54a70486f","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/19//#testresult/9488d9a54a70486f","status":"passed","time":{"start":1706490528976,"stop":1706490530184,"duration":1208}},{"uid":"ded4a7729db4b0cf","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/18//#testresult/ded4a7729db4b0cf","status":"passed","time":{"start":1706404397455,"stop":1706404398912,"duration":1457}},{"uid":"a372ad5a77e29118","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/17//#testresult/a372ad5a77e29118","status":"passed","time":{"start":1706317648650,"stop":1706317650113,"duration":1463}},{"uid":"4ca12d4359ed5c6","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/16//#testresult/4ca12d4359ed5c6","status":"passed","time":{"start":1706231407599,"stop":1706231408521,"duration":922}},{"uid":"8e8f8f86a0f8dbdf","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/15//#testresult/8e8f8f86a0f8dbdf","status":"passed","time":{"start":1706145325240,"stop":1706145326298,"duration":1058}},{"uid":"6d675aaa06cb2d4f","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/14//#testresult/6d675aaa06cb2d4f","status":"passed","time":{"start":1706058908698,"stop":1706058909755,"duration":1057}}]},"tags":[]},"source":"4b30a7831b86beba.json","parameterValues":["BarnsleyMBCouncil","None","None"]}