{"uid":"7247c3e4b1420d94","name":"Validate Council Output [AylesburyValeCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"7c134e9afa771d2f5eae137ddf4714bc","time":{"start":1707440835245,"stop":1707440838989,"duration":3744},"status":"failed","statusMessage":"ValueError: No collection data found for provided UPRN.","statusTrace":"fixturefunc = <function scrape_step at 0x7fdd30927010>\nrequest = <FixtureRequest for <Function test_scenario_outline[AylesburyValeCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fdd307bc0a0>, 'council': 'AylesburyValeCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AylesburyValeCouncil.CouncilClass object at 0x7fdd307bcdf0>, page = ''\nkwargs = {'headless': True, 'paon': None, 'postcode': None, 'uprn': '766252532', ...}\nuprn = '766252532'\nheaders = {'Content-Type': 'text/xml; charset=UTF-8', 'SOAPAction': '\"http://tempuri.org/GetCollections\"'}\npost_data = '<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=...p:Body><GetCollections xmlns=\"http://tempuri.org/\"><uprn>766252532</uprn></GetCollections></soap:Body></soap:Envelope>'\nresponse = <Response [500]>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        uprn = kwargs.get(\"uprn\")\n        check_uprn(uprn)\n    \n        # Make SOAP Request\n        headers = {\n            \"Content-Type\": \"text/xml; charset=UTF-8\",\n            \"SOAPAction\": '\"http://tempuri.org/GetCollections\"',\n        }\n    \n        post_data = (\n            '<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope '\n            'xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" '\n            'xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" '\n            'xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><GetCollections '\n            'xmlns=\"http://tempuri.org/\"><uprn>'\n            + uprn\n            + \"</uprn></GetCollections></soap:Body></soap:Envelope>\"\n        )\n    \n        response = requests.post(\n            \"http://avdcbins.web-labs.co.uk/RefuseApi.asmx\",\n            data=post_data,\n            headers=headers,\n        )\n    \n        if response.status_code != 200:\n>           raise ValueError(\"No collection data found for provided UPRN.\")\nE           ValueError: No collection data found for provided UPRN.\n\nuk_bin_collection/uk_bin_collection/councils/AylesburyValeCouncil.py:41: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: No collection data found for provided UPRN.","statusTrace":"fixturefunc = <function scrape_step at 0x7fdd30927010>\nrequest = <FixtureRequest for <Function test_scenario_outline[AylesburyValeCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fdd307bc0a0>, 'council': 'AylesburyValeCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AylesburyValeCouncil.CouncilClass object at 0x7fdd307bcdf0>, page = ''\nkwargs = {'headless': True, 'paon': None, 'postcode': None, 'uprn': '766252532', ...}\nuprn = '766252532'\nheaders = {'Content-Type': 'text/xml; charset=UTF-8', 'SOAPAction': '\"http://tempuri.org/GetCollections\"'}\npost_data = '<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=...p:Body><GetCollections xmlns=\"http://tempuri.org/\"><uprn>766252532</uprn></GetCollections></soap:Body></soap:Envelope>'\nresponse = <Response [500]>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        uprn = kwargs.get(\"uprn\")\n        check_uprn(uprn)\n    \n        # Make SOAP Request\n        headers = {\n            \"Content-Type\": \"text/xml; charset=UTF-8\",\n            \"SOAPAction\": '\"http://tempuri.org/GetCollections\"',\n        }\n    \n        post_data = (\n            '<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope '\n            'xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" '\n            'xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" '\n            'xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><GetCollections '\n            'xmlns=\"http://tempuri.org/\"><uprn>'\n            + uprn\n            + \"</uprn></GetCollections></soap:Body></soap:Envelope>\"\n        )\n    \n        response = requests.post(\n            \"http://avdcbins.web-labs.co.uk/RefuseApi.asmx\",\n            data=post_data,\n            headers=headers,\n        )\n    \n        if response.status_code != 200:\n>           raise ValueError(\"No collection data found for provided UPRN.\")\nE           ValueError: No collection data found for provided UPRN.\n\nuk_bin_collection/uk_bin_collection/councils/AylesburyValeCouncil.py:41: ValueError","steps":[{"name":"Given the council: AylesburyValeCouncil","time":{"start":1707440835246,"stop":1707440835247,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from AylesburyValeCouncil using None and the None is set","time":{"start":1707440835247,"stop":1707440838989,"duration":3742},"status":"failed","statusMessage":"No collection data found for provided UPRN.","statusTrace":"ValueError: No collection data found for provided UPRN.\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az523-512"},{"name":"thread","value":"2934-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"AylesburyValeCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":27,"unknown":0,"total":29},"items":[{"uid":"21396425e4d3332","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/29//#testresult/21396425e4d3332","status":"passed","time":{"start":1707354437570,"stop":1707354438636,"duration":1066}},{"uid":"c9e2e95a71ad4ebc","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/28//#testresult/c9e2e95a71ad4ebc","status":"passed","time":{"start":1707267977484,"stop":1707267981283,"duration":3799}},{"uid":"f640fd8dcbcff3dc","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/27//#testresult/f640fd8dcbcff3dc","status":"passed","time":{"start":1707181700342,"stop":1707181702614,"duration":2272}},{"uid":"c8613a5c24d3f9bc","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/26//#testresult/c8613a5c24d3f9bc","status":"passed","time":{"start":1707095421305,"stop":1707095422303,"duration":998}},{"uid":"705d8171ce957ac8","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/25//#testresult/705d8171ce957ac8","status":"passed","time":{"start":1707009180845,"stop":1707009181939,"duration":1094}},{"uid":"78caa56adefd86d7","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/24//#testresult/78caa56adefd86d7","status":"passed","time":{"start":1706922420183,"stop":1706922422148,"duration":1965}},{"uid":"fdfdf91483448ce7","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/23//#testresult/fdfdf91483448ce7","status":"passed","time":{"start":1706836101303,"stop":1706836104167,"duration":2864}},{"uid":"aca93de8f7beaae0","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/22//#testresult/aca93de8f7beaae0","status":"passed","time":{"start":1706749938647,"stop":1706749940080,"duration":1433}},{"uid":"1d7875a54163014","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/21//#testresult/1d7875a54163014","status":"passed","time":{"start":1706663310917,"stop":1706663314273,"duration":3356}},{"uid":"f856eb71a68fe07","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/20//#testresult/f856eb71a68fe07","status":"failed","statusDetails":"jsonschema.exceptions.ValidationError: [] is too short\n\nFailed validating 'minItems' in schema['properties']['bins']:\n    {'items': {'$ref': '#/definitions/Bin'}, 'minItems': 1, 'type': 'array'}\n\nOn instance['bins']:\n    []","time":{"start":1706576896160,"stop":1706576986749,"duration":90589}},{"uid":"d509d6f4bf71c20c","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/19//#testresult/d509d6f4bf71c20c","status":"passed","time":{"start":1706490527102,"stop":1706490528730,"duration":1628}},{"uid":"72fcc7eb0e00d38d","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/18//#testresult/72fcc7eb0e00d38d","status":"passed","time":{"start":1706404395181,"stop":1706404396712,"duration":1531}},{"uid":"8e10a4914940717a","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/17//#testresult/8e10a4914940717a","status":"passed","time":{"start":1706317645770,"stop":1706317648381,"duration":2611}},{"uid":"56e5539bbdb88b55","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/16//#testresult/56e5539bbdb88b55","status":"passed","time":{"start":1706231406076,"stop":1706231407325,"duration":1249}},{"uid":"116f9c16cbe2a561","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/15//#testresult/116f9c16cbe2a561","status":"passed","time":{"start":1706145323489,"stop":1706145324970,"duration":1481}},{"uid":"96239c6ee5b3e78c","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/14//#testresult/96239c6ee5b3e78c","status":"passed","time":{"start":1706058907127,"stop":1706058908523,"duration":1396}},{"uid":"c133312d8879cb6c","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/13//#testresult/c133312d8879cb6c","status":"passed","time":{"start":1705972549265,"stop":1705972550351,"duration":1086}},{"uid":"314825aadd8cbbaa","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/12//#testresult/314825aadd8cbbaa","status":"passed","time":{"start":1705886236037,"stop":1705886237462,"duration":1425}},{"uid":"2ca12ad9045a839b","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/11//#testresult/2ca12ad9045a839b","status":"passed","time":{"start":1705799965052,"stop":1705799965902,"duration":850}},{"uid":"b45754038ff81cf","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.10/10//#testresult/b45754038ff81cf","status":"passed","time":{"start":1705713177018,"stop":1705713179971,"duration":2953}}]},"tags":[]},"source":"7247c3e4b1420d94.json","parameterValues":["AylesburyValeCouncil","None","None"]}