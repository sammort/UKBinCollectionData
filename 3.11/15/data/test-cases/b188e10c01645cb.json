{"uid":"b188e10c01645cb","name":"Validate Council Output [ReadingBoroughCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"7fabea5e392292423f65daf6696a21a8","time":{"start":1706145374299,"stop":1706145375038,"duration":739},"status":"failed","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"fixturefunc = <function scrape_step at 0x7f20b5cb0d60>\nrequest = <FixtureRequest for <Function test_scenario_outline[ReadingBoroughCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f20b502aad0>, 'council': 'ReadingBoroughCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/ReadingBoroughCouncil.py:13: in parse_data\n    json_result = json.loads(page.text)\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f20cb9f79d0>\ns = '<html>\\n  <head>\\n    <title>Internal Server Error</title>\\n  </head>\\n  <body>\\n    <h1><p>Internal Server Error</p></h1>\\n    \\n  </body>\\n</html>\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/json/decoder.py:355: JSONDecodeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"fixturefunc = <function scrape_step at 0x7f20b5cb0d60>\nrequest = <FixtureRequest for <Function test_scenario_outline[ReadingBoroughCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f20b502aad0>, 'council': 'ReadingBoroughCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/ReadingBoroughCouncil.py:13: in parse_data\n    json_result = json.loads(page.text)\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f20cb9f79d0>\ns = '<html>\\n  <head>\\n    <title>Internal Server Error</title>\\n  </head>\\n  <body>\\n    <h1><p>Internal Server Error</p></h1>\\n    \\n  </body>\\n</html>\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/json/decoder.py:355: JSONDecodeError","steps":[{"name":"Given the council: ReadingBoroughCouncil","time":{"start":1706145374300,"stop":1706145374300,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from ReadingBoroughCouncil using None and the None is set","time":{"start":1706145374300,"stop":1706145375038,"duration":738},"status":"failed","statusMessage":"Expecting value: line 1 column 1 (char 0)","statusTrace":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az585-902"},{"name":"thread","value":"2794-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"ReadingBoroughCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":12,"unknown":0,"total":14},"items":[{"uid":"87dfe84d79eb8f2d","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.11/14//#testresult/87dfe84d79eb8f2d","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1706058938999,"stop":1706058939481,"duration":482}},{"uid":"49ada7653dddfdca","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.11/13//#testresult/49ada7653dddfdca","status":"passed","time":{"start":1705972596979,"stop":1705972597741,"duration":762}},{"uid":"2b47e1625c08f624","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.11/12//#testresult/2b47e1625c08f624","status":"passed","time":{"start":1705886285824,"stop":1705886286297,"duration":473}},{"uid":"81a75fc8cd0c2bc4","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.11/11//#testresult/81a75fc8cd0c2bc4","status":"passed","time":{"start":1705799983913,"stop":1705799984412,"duration":499}},{"uid":"22205d36cd244e9e","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.11/10//#testresult/22205d36cd244e9e","status":"passed","time":{"start":1705713310661,"stop":1705713311155,"duration":494}},{"uid":"9178e501599b1f8d","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.11/9//#testresult/9178e501599b1f8d","status":"passed","time":{"start":1705626939220,"stop":1705626939728,"duration":508}},{"uid":"59aef5dfd02a3e60","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.11/8//#testresult/59aef5dfd02a3e60","status":"passed","time":{"start":1705540541921,"stop":1705540542478,"duration":557}},{"uid":"607e07bae4081215","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.11/7//#testresult/607e07bae4081215","status":"passed","time":{"start":1705454097423,"stop":1705454098265,"duration":842}},{"uid":"4ef380a7872543c9","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.11/6//#testresult/4ef380a7872543c9","status":"passed","time":{"start":1705367672944,"stop":1705367673694,"duration":750}},{"uid":"56606c73db0924f4","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.11/5//#testresult/56606c73db0924f4","status":"passed","time":{"start":1705281403653,"stop":1705281404156,"duration":503}},{"uid":"62ecb6ee83211104","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.11/4//#testresult/62ecb6ee83211104","status":"passed","time":{"start":1705195188255,"stop":1705195188801,"duration":546}},{"uid":"496df06e02455d6","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.11/3//#testresult/496df06e02455d6","status":"passed","time":{"start":1705108533889,"stop":1705108534399,"duration":510}},{"uid":"62d41dec972c3334","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.11/2//#testresult/62d41dec972c3334","status":"passed","time":{"start":1705022107177,"stop":1705022107946,"duration":769}}]},"tags":[]},"source":"b188e10c01645cb.json","parameterValues":["ReadingBoroughCouncil","None","None"]}