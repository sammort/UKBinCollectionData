{"uid":"89c969e8c6d1fe49","name":"Validate Council Output [NottinghamCityCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"10866f1748aa8c1e3efd6f525dda6e8f","time":{"start":1707527190513,"stop":1707527251234,"duration":60721},"status":"failed","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"fixturefunc = <function scrape_step at 0x7fc754dd82c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[NottinghamCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fc753b3d4d0>, 'council': 'NottinghamCityCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/NottinghamCityCouncil.py:21: in parse_data\n    json_data = json.loads(response.text)\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fc768984790>\ns = '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\\r\\n<htm...source you are looking for, and it cannot be displayed.</h3>\\r\\n </fieldset></div>\\r\\n</div>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/json/decoder.py:355: JSONDecodeError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"fixturefunc = <function scrape_step at 0x7fc754dd82c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[NottinghamCityCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fc753b3d4d0>, 'council': 'NottinghamCityCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:78: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/NottinghamCityCouncil.py:21: in parse_data\n    json_data = json.loads(response.text)\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fc768984790>\ns = '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\\r\\n<htm...source you are looking for, and it cannot be displayed.</h3>\\r\\n </fieldset></div>\\r\\n</div>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/json/decoder.py:355: JSONDecodeError","steps":[{"name":"Given the council: NottinghamCityCouncil","time":{"start":1707527190513,"stop":1707527190513,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from NottinghamCityCouncil using None and the None is set","time":{"start":1707527190513,"stop":1707527251234,"duration":60721},"status":"failed","statusMessage":"Expecting value: line 1 column 1 (char 0)","statusTrace":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1249-611"},{"name":"thread","value":"2727-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"NottinghamCityCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":29,"unknown":0,"total":30},"items":[{"uid":"1bb57a7e7a62f52f","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.11/30//#testresult/1bb57a7e7a62f52f","status":"passed","time":{"start":1707440886983,"stop":1707440889797,"duration":2814}},{"uid":"8e1a424bd95f75ba","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.11/29//#testresult/8e1a424bd95f75ba","status":"passed","time":{"start":1707354478480,"stop":1707354483101,"duration":4621}},{"uid":"6962f2c997e3fa49","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.11/28//#testresult/6962f2c997e3fa49","status":"passed","time":{"start":1707268020864,"stop":1707268024425,"duration":3561}},{"uid":"eaa1f764fe13b7c5","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.11/27//#testresult/eaa1f764fe13b7c5","status":"passed","time":{"start":1707181732148,"stop":1707181735485,"duration":3337}},{"uid":"c2d32954294affc","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.11/26//#testresult/c2d32954294affc","status":"passed","time":{"start":1707095450610,"stop":1707095453823,"duration":3213}},{"uid":"3e29650ba1ca893f","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.11/25//#testresult/3e29650ba1ca893f","status":"passed","time":{"start":1707009229603,"stop":1707009232476,"duration":2873}},{"uid":"74689d6bbc3547ca","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.11/24//#testresult/74689d6bbc3547ca","status":"passed","time":{"start":1706922472898,"stop":1706922477435,"duration":4537}},{"uid":"12d08f11655a7c21","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.11/23//#testresult/12d08f11655a7c21","status":"passed","time":{"start":1706836137044,"stop":1706836139097,"duration":2053}},{"uid":"b6ced1389bcebe23","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.11/22//#testresult/b6ced1389bcebe23","status":"passed","time":{"start":1706749956017,"stop":1706749959948,"duration":3931}},{"uid":"61a7b736b8f2eccc","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.11/21//#testresult/61a7b736b8f2eccc","status":"passed","time":{"start":1706663358158,"stop":1706663363630,"duration":5472}},{"uid":"a68c430a265ba770","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.11/20//#testresult/a68c430a265ba770","status":"passed","time":{"start":1706576948892,"stop":1706576951123,"duration":2231}},{"uid":"2fc2a9babb6b286c","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.11/19//#testresult/2fc2a9babb6b286c","status":"passed","time":{"start":1706490556701,"stop":1706490563138,"duration":6437}},{"uid":"59fdbe61072abef1","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.11/18//#testresult/59fdbe61072abef1","status":"passed","time":{"start":1706404432639,"stop":1706404437172,"duration":4533}},{"uid":"bfa975fcf0d03254","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.11/17//#testresult/bfa975fcf0d03254","status":"passed","time":{"start":1706317676082,"stop":1706317685410,"duration":9328}},{"uid":"f78242c2729fd99e","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.11/16//#testresult/f78242c2729fd99e","status":"passed","time":{"start":1706231427148,"stop":1706231431377,"duration":4229}},{"uid":"aa7c7d4761040f8b","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.11/15//#testresult/aa7c7d4761040f8b","status":"passed","time":{"start":1706145368530,"stop":1706145371882,"duration":3352}},{"uid":"799a06dc05633d88","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.11/14//#testresult/799a06dc05633d88","status":"passed","time":{"start":1706058935530,"stop":1706058937273,"duration":1743}},{"uid":"4d4d1e9ef3ffaaa2","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.11/13//#testresult/4d4d1e9ef3ffaaa2","status":"passed","time":{"start":1705972591993,"stop":1705972594640,"duration":2647}},{"uid":"20eb5e1d11c96be2","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.11/12//#testresult/20eb5e1d11c96be2","status":"passed","time":{"start":1705886281555,"stop":1705886283877,"duration":2322}},{"uid":"e9dc5a400ee6eb4","reportUrl":"https://sammort.github.io/UKBinCollectionData/3.11/11//#testresult/e9dc5a400ee6eb4","status":"passed","time":{"start":1705799990613,"stop":1705799992671,"duration":2058}}]},"tags":[]},"source":"89c969e8c6d1fe49.json","parameterValues":["NottinghamCityCouncil","None","None"]}